-- Make sure we're connected to the PDB
ALTER SESSION SET CONTAINER = FREEPDB1;

-- Create application user/schema if it doesn't exist
BEGIN
   EXECUTE IMMEDIATE 'DROP USER app_user CASCADE';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -1918 THEN -- ORA-01918: user does not exist
         RAISE;
      END IF;
END;
/

-- Create a dedicated user for the application
CREATE USER app_user IDENTIFIED BY "app_password"
QUOTA UNLIMITED ON USERS;

-- Grant necessary privileges
GRANT CREATE SESSION, CREATE TABLE, CREATE VIEW, CREATE SEQUENCE, CREATE TRIGGER TO app_user;
GRANT CREATE PROCEDURE TO app_user;

-- Switch to the new schema for the remaining operations
ALTER SESSION SET CURRENT_SCHEMA = app_user;

-- Create Users table if it doesn't exist
BEGIN
  EXECUTE IMMEDIATE 'CREATE TABLE USERS (
    id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) NOT NULL UNIQUE,
    age NUMBER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )';
  DBMS_OUTPUT.PUT_LINE('USERS table created successfully');
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE = -955 THEN
      DBMS_OUTPUT.PUT_LINE('USERS table already exists');
    ELSE
      RAISE;
    END IF;
END;
/

-- Create index on email for faster lookups
BEGIN
  EXECUTE IMMEDIATE 'CREATE INDEX idx_users_email ON USERS(email)';
  DBMS_OUTPUT.PUT_LINE('Index created successfully');
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE = -1408 OR SQLCODE = -955 THEN
      DBMS_OUTPUT.PUT_LINE('Index already exists');
    ELSE
      RAISE;
    END IF;
END;
/

-- Create a trigger to update the updated_at timestamp
BEGIN
  EXECUTE IMMEDIATE '
  CREATE OR REPLACE TRIGGER users_update_trigger
  BEFORE UPDATE ON USERS
  FOR EACH ROW
  BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
  END;';
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating trigger: ' || SQLERRM);
END;
/

-- Insert sample data
INSERT INTO users (name, email, age) VALUES ('John Doe', 'john.doe@example.com', 30);
INSERT INTO users (name, email, age) VALUES ('Jane Smith', 'jane.smith@example.com', 25);
INSERT INTO users (name, email, age) VALUES ('Bob Johnson', 'bob.johnson@example.com', 40);
INSERT INTO users (name, email, age) VALUES ('Alice Williams', 'alice.williams@example.com', 35);
INSERT INTO users (name, email, age) VALUES ('Charlie Brown', 'charlie.brown@example.com', 22);

-- Verify data was inserted
SELECT * FROM users;

-- Create a view for user reports
CREATE OR REPLACE VIEW user_age_summary AS
SELECT 
    COUNT(*) as total_users,
    MIN(age) as youngest_age,
    MAX(age) as oldest_age,
    ROUND(AVG(age), 2) as average_age
FROM users;

-- Verify the view works
SELECT * FROM user_age_summary;

-- Create Expense Report Header table
BEGIN
  EXECUTE IMMEDIATE 'CREATE TABLE XXSSGIL_AP_EXPENSE_REPORT_H (
    REPORT_HEADER_ID NUMBER NOT NULL,
    EMPLOYEE_ID NUMBER(10),
    WEEK_END_DATE DATE NOT NULL,
    CREATION_DATE DATE NOT NULL,
    CREATED_BY NUMBER NOT NULL,
    LAST_UPDATE_DATE DATE NOT NULL,
    LAST_UPDATED_BY NUMBER NOT NULL,
    VOUCHNO NUMBER NOT NULL,
    TOTAL NUMBER NOT NULL,
    VENDOR_ID NUMBER(15),
    VENDOR_SITE_ID NUMBER(15),
    EXPENSE_CHECK_ADDRESS_FLAG VARCHAR2(30 BYTE),
    REFERENCE_1 VARCHAR2(30 BYTE),
    REFERENCE_2 VARCHAR2(30 BYTE),
    INVOICE_NUM VARCHAR2(50 BYTE),
    EXPENSE_REPORT_ID NUMBER,
    ACCTS_PAY_CODE_COMBINATION_ID NUMBER(15),
    SET_OF_BOOKS_ID NUMBER(15),
    SOURCE VARCHAR2(25 BYTE),
    PURGEABLE_FLAG VARCHAR2(1 BYTE),
    ACCOUNTING_DATE DATE,
    MAXIMUM_AMOUNT_TO_APPLY NUMBER,
    ADVANCE_INVOICE_TO_APPLY NUMBER(15),
    APPLY_ADVANCES_DEFAULT VARCHAR2(4 BYTE),
    EMPLOYEE_CCID NUMBER,
    DESCRIPTION VARCHAR2(240 BYTE),
    REJECT_CODE VARCHAR2(30 BYTE),
    HOLD_LOOKUP_CODE VARCHAR2(25 BYTE),
    ATTRIBUTE_CATEGORY VARCHAR2(150 BYTE),
    ATTRIBUTE1 VARCHAR2(150 BYTE),
    ATTRIBUTE2 VARCHAR2(150 BYTE),
    ATTRIBUTE3 VARCHAR2(150 BYTE),
    ATTRIBUTE4 VARCHAR2(150 BYTE),
    ATTRIBUTE5 VARCHAR2(150 BYTE),
    ATTRIBUTE6 VARCHAR2(150 BYTE),
    ATTRIBUTE7 VARCHAR2(150 BYTE),
    ATTRIBUTE8 VARCHAR2(150 BYTE),
    ATTRIBUTE9 VARCHAR2(150 BYTE),
    ATTRIBUTE10 VARCHAR2(150 BYTE),
    ATTRIBUTE11 VARCHAR2(150 BYTE),
    ATTRIBUTE12 VARCHAR2(150 BYTE),
    ATTRIBUTE13 VARCHAR2(150 BYTE),
    ATTRIBUTE14 VARCHAR2(150 BYTE),
    ATTRIBUTE15 VARCHAR2(150 BYTE),
    DEFAULT_CURRENCY_CODE VARCHAR2(15 BYTE) NOT NULL,
    DEFAULT_EXCHANGE_RATE_TYPE VARCHAR2(30 BYTE),
    DEFAULT_EXCHANGE_RATE NUMBER,
    DEFAULT_EXCHANGE_DATE DATE,
    LAST_UPDATE_LOGIN NUMBER(15),
    VOUCHER_NUM VARCHAR2(50 BYTE),
    USSGL_TRANSACTION_CODE VARCHAR2(30 BYTE),
    USSGL_TRX_CODE_CONTEXT VARCHAR2(30 BYTE),
    DOC_CATEGORY_CODE VARCHAR2(30 BYTE),
    AWT_GROUP_ID NUMBER(15),
    ORG_ID NUMBER(15),
    WORKFLOW_APPROVED_FLAG VARCHAR2(1 BYTE),
    FLEX_CONCATENATED VARCHAR2(240 BYTE),
    GLOBAL_ATTRIBUTE_CATEGORY VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE1 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE2 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE3 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE4 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE5 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE6 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE7 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE8 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE9 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE10 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE11 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE12 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE13 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE14 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE15 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE16 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE17 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE18 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE19 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE20 VARCHAR2(150 BYTE),
    OVERRIDE_APPROVER_ID NUMBER(9),
    PAYMENT_CROSS_RATE_TYPE VARCHAR2(30 BYTE),
    PAYMENT_CROSS_RATE_DATE DATE,
    PAYMENT_CROSS_RATE NUMBER,
    PAYMENT_CURRENCY_CODE VARCHAR2(15 BYTE),
    CORE_WF_STATUS_FLAG VARCHAR2(1 BYTE),
    PREPAY_APPLY_FLAG VARCHAR2(4 BYTE),
    PREPAY_NUM VARCHAR2(50 BYTE),
    PREPAY_DIST_NUM NUMBER(15),
    PREPAY_APPLY_AMOUNT NUMBER,
    PREPAY_GL_DATE DATE,
    BOTHPAY_PARENT_ID NUMBER(15),
    SHORTPAY_PARENT_ID NUMBER(15),
    PAID_ON_BEHALF_EMPLOYEE_ID NUMBER(15),
    OVERRIDE_APPROVER_NAME VARCHAR2(240 BYTE),
    AMT_DUE_CCARD_COMPANY NUMBER,
    AMT_DUE_EMPLOYEE NUMBER,
    DEFAULT_RECEIPT_CURRENCY_CODE VARCHAR2(15 BYTE),
    MULTIPLE_CURRENCIES_FLAG VARCHAR2(1 BYTE),
    EXPENSE_STATUS_CODE VARCHAR2(30 BYTE),
    EXPENSE_LAST_STATUS_DATE DATE,
    EXPENSE_CURRENT_APPROVER_ID NUMBER(15),
    REPORT_FILING_NUMBER VARCHAR2(240 BYTE),
    RECEIPTS_RECEIVED_DATE DATE,
    AUDIT_CODE VARCHAR2(30 BYTE),
    REPORT_SUBMITTED_DATE DATE,
    LAST_AUDITED_BY NUMBER(15),
    RETURN_REASON_CODE VARCHAR2(30 BYTE),
    RETURN_INSTRUCTION VARCHAR2(4000 BYTE),
    RECEIPTS_STATUS VARCHAR2(30 BYTE),
    HOLDING_REPORT_HEADER_ID NUMBER(15),
    REQUEST_ID NUMBER(15),
    ADVANCES_JUSTIFICATION VARCHAR2(240 BYTE),
    IMAGE_RECEIPTS_STATUS VARCHAR2(30 BYTE),
    IMAGE_RECEIPTS_RECEIVED_DATE DATE,
    MISSING_IMG_JUST VARCHAR2(240 BYTE),
    APPROVAL_TYPE VARCHAR2(10 BYTE),
    OVERDUE_REQUEST_ID NUMBER,
    PRIMARY KEY (REPORT_HEADER_ID)
  )';
  DBMS_OUTPUT.PUT_LINE('XXSSGIL_AP_EXPENSE_REPORT_H table created successfully');
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE = -955 THEN
      DBMS_OUTPUT.PUT_LINE('XXSSGIL_AP_EXPENSE_REPORT_H table already exists');
    ELSE
      RAISE;
    END IF;
END;
/

-- Create Expense Report Line table
BEGIN
  EXECUTE IMMEDIATE 'CREATE TABLE XXSSGIL_AP_EXPENSE_REPORT_L (
    REPORT_HEADER_ID NUMBER NOT NULL,
    LAST_UPDATE_DATE DATE NOT NULL,
    LAST_UPDATED_BY NUMBER NOT NULL,
    CODE_COMBINATION_ID NUMBER,
    ITEM_DESCRIPTION VARCHAR2(240 BYTE) NOT NULL,
    SET_OF_BOOKS_ID NUMBER(15) NOT NULL,
    AMOUNT NUMBER,
    ATTRIBUTE_CATEGORY VARCHAR2(150 BYTE),
    ATTRIBUTE1 VARCHAR2(150 BYTE),
    ATTRIBUTE2 VARCHAR2(150 BYTE),
    ATTRIBUTE3 VARCHAR2(150 BYTE),
    ATTRIBUTE4 VARCHAR2(150 BYTE),
    ATTRIBUTE5 VARCHAR2(150 BYTE),
    ATTRIBUTE6 VARCHAR2(150 BYTE),
    ATTRIBUTE7 VARCHAR2(150 BYTE),
    ATTRIBUTE8 VARCHAR2(150 BYTE),
    ATTRIBUTE9 VARCHAR2(150 BYTE),
    ATTRIBUTE10 VARCHAR2(150 BYTE),
    ATTRIBUTE11 VARCHAR2(150 BYTE),
    ATTRIBUTE12 VARCHAR2(150 BYTE),
    ATTRIBUTE13 VARCHAR2(150 BYTE),
    ATTRIBUTE14 VARCHAR2(150 BYTE),
    ATTRIBUTE15 VARCHAR2(150 BYTE),
    CURRENCY_CODE VARCHAR2(15 BYTE) NOT NULL,
    EXCHANGE_RATE_TYPE VARCHAR2(30 BYTE),
    EXCHANGE_RATE NUMBER,
    EXCHANGE_DATE DATE,
    VAT_CODE VARCHAR2(30 BYTE),
    LINE_TYPE_LOOKUP_CODE VARCHAR2(25 BYTE) NOT NULL,
    LAST_UPDATE_LOGIN NUMBER(15),
    CREATION_DATE DATE,
    CREATED_BY NUMBER(15),
    STAT_AMOUNT NUMBER,
    USSGL_TRANSACTION_CODE VARCHAR2(30 BYTE),
    USSGL_TRX_CODE_CONTEXT VARCHAR2(30 BYTE),
    PROJECT_ACCOUNTING_CONTEXT VARCHAR2(30 BYTE),
    PROJECT_ID NUMBER(15),
    TASK_ID NUMBER(15),
    EXPENDITURE_ORGANIZATION_ID NUMBER(15),
    EXPENDITURE_TYPE VARCHAR2(30 BYTE),
    EXPENDITURE_ITEM_DATE DATE,
    PA_QUANTITY NUMBER,
    DISTRIBUTION_LINE_NUMBER NUMBER(15),
    REFERENCE_1 VARCHAR2(30 BYTE),
    REFERENCE_2 VARCHAR2(30 BYTE),
    AWT_GROUP_ID NUMBER(15),
    ORG_ID NUMBER(15),
    RECEIPT_VERIFIED_FLAG VARCHAR2(1 BYTE),
    JUSTIFICATION_REQUIRED_FLAG VARCHAR2(1 BYTE),
    RECEIPT_REQUIRED_FLAG VARCHAR2(1 BYTE),
    RECEIPT_MISSING_FLAG VARCHAR2(1 BYTE),
    JUSTIFICATION VARCHAR2(240 BYTE),
    EXPENSE_GROUP VARCHAR2(80 BYTE),
    START_EXPENSE_DATE DATE,
    END_EXPENSE_DATE DATE,
    RECEIPT_CURRENCY_CODE VARCHAR2(15 BYTE),
    RECEIPT_CONVERSION_RATE NUMBER,
    DAILY_AMOUNT NUMBER,
    RECEIPT_CURRENCY_AMOUNT NUMBER,
    WEB_PARAMETER_ID NUMBER,
    GLOBAL_ATTRIBUTE_CATEGORY VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE1 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE2 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE3 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE4 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE5 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE6 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE7 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE8 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE9 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE10 VARCHAR2(150 BYTE),
    AMOUNT_INCLUDES_TAX_FLAG VARCHAR2(1 BYTE),
    GLOBAL_ATTRIBUTE11 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE12 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE13 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE14 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE15 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE16 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE17 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE18 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE19 VARCHAR2(150 BYTE),
    GLOBAL_ATTRIBUTE20 VARCHAR2(150 BYTE),
    ADJUSTMENT_REASON VARCHAR2(240 BYTE),
    POLICY_SHORTPAY_FLAG VARCHAR2(1 BYTE),
    AWARD_ID NUMBER(15),
    MERCHANT_DOCUMENT_NUMBER VARCHAR2(80 BYTE),
    MERCHANT_NAME VARCHAR2(240 BYTE),
    MERCHANT_REFERENCE VARCHAR2(240 BYTE),
    MERCHANT_TAX_REG_NUMBER VARCHAR2(80 BYTE),
    MERCHANT_TAXPAYER_ID VARCHAR2(80 BYTE),
    COUNTRY_OF_SUPPLY VARCHAR2(5 BYTE),
    TAX_CODE_OVERRIDE_FLAG VARCHAR2(1 BYTE),
    TAX_CODE_ID NUMBER(15),
    CREDIT_CARD_TRX_ID NUMBER(15),
    ITEMIZE_ID NUMBER(15),
    PROJECT_NAME VARCHAR2(30 BYTE),
    TASK_NAME VARCHAR2(30 BYTE),
    COMPANY_PREPAID_INVOICE_ID NUMBER(15),
    PA_INTERFACED_FLAG VARCHAR2(1 BYTE),
    PROJECT_NUMBER VARCHAR2(30 BYTE),
    TASK_NUMBER VARCHAR2(30 BYTE),
    AWARD_NUMBER VARCHAR2(15 BYTE),
    VEHICLE_CATEGORY_CODE VARCHAR2(30 BYTE),
    VEHICLE_TYPE VARCHAR2(30 BYTE),
    FUEL_TYPE VARCHAR2(30 BYTE),
    NUMBER_PEOPLE NUMBER,
    DAILY_DISTANCE NUMBER,
    DISTANCE_UNIT_CODE VARCHAR2(30 BYTE),
    AVG_MILEAGE_RATE NUMBER,
    DESTINATION_FROM VARCHAR2(80 BYTE),
    DESTINATION_TO VARCHAR2(80 BYTE),
    TRIP_DISTANCE NUMBER,
    LICENSE_PLATE_NUMBER VARCHAR2(30 BYTE),
    MILEAGE_RATE_ADJUSTED_FLAG VARCHAR2(1 BYTE),
    LOCATION_ID NUMBER(15),
    NUM_PDM_DAYS1 NUMBER,
    NUM_PDM_DAYS2 NUMBER,
    NUM_PDM_DAYS3 NUMBER,
    PER_DIEM_RATE1 NUMBER,
    PER_DIEM_RATE2 NUMBER,
    PER_DIEM_RATE3 NUMBER,
    DEDUCTION_ADDITION_AMT1 NUMBER,
    DEDUCTION_ADDITION_AMT2 NUMBER,
    DEDUCTION_ADDITION_AMT3 NUMBER,
    NUM_FREE_BREAKFASTS1 NUMBER,
    NUM_FREE_LUNCHES1 NUMBER,
    NUM_FREE_DINNERS1 NUMBER,
    NUM_FREE_ACCOMMODATIONS1 NUMBER,
    NUM_FREE_BREAKFASTS2 NUMBER,
    NUM_FREE_LUNCHES2 NUMBER,
    NUM_FREE_DINNERS2 NUMBER,
    NUM_FREE_ACCOMMODATIONS2 NUMBER,
    NUM_FREE_BREAKFASTS3 NUMBER,
    NUM_FREE_LUNCHES3 NUMBER,
    NUM_FREE_DINNERS3 NUMBER,
    NUM_FREE_ACCOMMODATIONS3 NUMBER,
    ATTENDEES VARCHAR2(240 BYTE),
    NUMBER_ATTENDEES NUMBER,
    TRAVEL_TYPE VARCHAR2(30 BYTE),
    TICKET_CLASS_CODE VARCHAR2(30 BYTE),
    TICKET_NUMBER VARCHAR2(80 BYTE),
    FLIGHT_NUMBER VARCHAR2(80 BYTE),
    LOCATION_TO_ID NUMBER(15),
    ITEMIZATION_PARENT_ID NUMBER,
    FLEX_CONCATENATED VARCHAR2(240 BYTE),
    FUNC_CURRENCY_AMT NUMBER,
    LOCATION VARCHAR2(80 BYTE),
    CATEGORY_CODE VARCHAR2(30 BYTE),
    ADJUSTMENT_REASON_CODE VARCHAR2(30 BYTE),
    AP_VALIDATION_ERROR VARCHAR2(240 BYTE),
    SUBMITTED_AMOUNT NUMBER,
    REPORT_LINE_ID NUMBER(15),
    ALLOCATION_REASON VARCHAR2(240 BYTE),
    ALLOCATION_SPLIT_CODE VARCHAR2(30 BYTE),
    RATE_PER_PASSENGER NUMBER,
    PASSENGER_RATE_TYPE VARCHAR2(30 BYTE),
    PASSENGER_AMOUNT NUMBER,
    RANGE_LOW NUMBER,
    RANGE_HIGH NUMBER,
    UOM_DAYS NUMBER,
    IMAGE_RECEIPT_REQUIRED_FLAG VARCHAR2(1 BYTE),
    RECEIPTS_ISSUE VARCHAR2(240 BYTE),
    ADJUSTMENT_REASON_COPY VARCHAR2(30 BYTE)
  )';
  DBMS_OUTPUT.PUT_LINE('XXSSGIL_AP_EXPENSE_REPORT_L table created successfully');
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE = -955 THEN
      DBMS_OUTPUT.PUT_LINE('XXSSGIL_AP_EXPENSE_REPORT_L table already exists');
    ELSE
      RAISE;
    END IF;
END;
/

-- Create User Info table
BEGIN
  EXECUTE IMMEDIATE 'CREATE TABLE XXMA_USER_MST (
    USER_ID NUMBER,
    SALESREP_ID NUMBER,
    SALES_PERSON_NAME VARCHAR2(200 BYTE),
    EMPLOYEE_ID NUMBER,
    EMPLOYEE_NAME VARCHAR2(200 BYTE),
    USER_NAME VARCHAR2(200 BYTE) NOT NULL,
    PASS_WORD VARCHAR2(200 BYTE) NOT NULL,
    IS_ACTIVE NUMBER,
    CHANGE_PASSW_FLG VARCHAR2(50 BYTE),
    PASSW_EXP_DATE DATE,
    PASSW_ST_DATE DATE,
    ATTRIBUTE1 DATE,
    ATTRIBUTE2 DATE,
    ATTRIBUTE3 DATE,
    ATTRIBUTE4 NUMBER,
    ATTRIBUTE5 NUMBER,
    ATTRIBUTE6 NUMBER,
    ATTRIBUTE7 VARCHAR2(200 BYTE),
    ATTRIBUTE8 VARCHAR2(200 BYTE),
    ATTRIBUTE9 VARCHAR2(200 BYTE),
    PASSW_EXP_DURATION VARCHAR2(200 BYTE),
    MOBILE_IME_STATUS VARCHAR2(200 BYTE),
    OTP_STATUS VARCHAR2(200 BYTE),
    OTP VARCHAR2(10 BYTE) DEFAULT NULL,
    OTP_EXPIRY TIMESTAMP(6) DEFAULT NULL
  )';
  DBMS_OUTPUT.PUT_LINE('XXMA_USER_MST table created successfully');
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE = -955 THEN
      DBMS_OUTPUT.PUT_LINE('XXMA_USER_MST table already exists');
    ELSE
      RAISE;
    END IF;
END;
/

-- Insert sample data into XXSSGIL_AP_EXPENSE_REPORT_H
INSERT INTO XXSSGIL_AP_EXPENSE_REPORT_H (
  REPORT_HEADER_ID, EMPLOYEE_ID, WEEK_END_DATE, CREATION_DATE, CREATED_BY, 
  LAST_UPDATE_DATE, LAST_UPDATED_BY, VOUCHNO, TOTAL, EXPENSE_CHECK_ADDRESS_FLAG,
  INVOICE_NUM, EXPENSE_REPORT_ID, SET_OF_BOOKS_ID, SOURCE, PURGEABLE_FLAG,
  DESCRIPTION, ATTRIBUTE_CATEGORY, ATTRIBUTE1, ATTRIBUTE2, DEFAULT_CURRENCY_CODE,
  LAST_UPDATE_LOGIN, ORG_ID, EXPENSE_STATUS_CODE, EXPENSE_LAST_STATUS_DATE
) VALUES (
  748652, 10482, TO_DATE('2025-01-20 14:02:16', 'YYYY-MM-DD HH24:MI:SS'), 
  TO_DATE('2025-01-20 14:10:11', 'YYYY-MM-DD HH24:MI:SS'), 6774,
  TO_DATE('2025-01-20 14:10:11', 'YYYY-MM-DD HH24:MI:SS'), 6774, 0, 12900, 'O',
  '748652/', 10040, 2021, 'XpenseXpress', 'N',
  'CTG tour', 'TEMPLATE_SSCIL_CMT', 'OAF', 'In-Process', 'BDT',
  36378048, 401, 'Initiated', TO_DATE('2025-01-20 14:02:16', 'YYYY-MM-DD HH24:MI:SS')
);

INSERT INTO XXSSGIL_AP_EXPENSE_REPORT_H (
  REPORT_HEADER_ID, EMPLOYEE_ID, WEEK_END_DATE, CREATION_DATE, CREATED_BY, 
  LAST_UPDATE_DATE, LAST_UPDATED_BY, VOUCHNO, TOTAL, EXPENSE_CHECK_ADDRESS_FLAG,
  INVOICE_NUM, EXPENSE_REPORT_ID, SET_OF_BOOKS_ID, SOURCE, PURGEABLE_FLAG,
  DESCRIPTION, ATTRIBUTE_CATEGORY, ATTRIBUTE1, ATTRIBUTE2, DEFAULT_CURRENCY_CODE,
  LAST_UPDATE_LOGIN, ORG_ID, EXPENSE_STATUS_CODE, EXPENSE_LAST_STATUS_DATE
) VALUES (
  747652, 102, TO_DATE('2025-01-04 10:41:49', 'YYYY-MM-DD HH24:MI:SS'), 
  TO_DATE('2025-01-04 10:47:05', 'YYYY-MM-DD HH24:MI:SS'), 1378,
  TO_DATE('2025-01-04 10:47:05', 'YYYY-MM-DD HH24:MI:SS'), 1378, 0, 500, 'O',
  '747652/', 10040, 2145, 'XpenseXpress', 'N',
  'Conveyance bill', 'TEMPLATE_SSCIL_CMT', 'OAF', 'Approved', 'BDT',
  36347390, 401, 'Exported', TO_DATE('2025-01-04 10:41:49', 'YYYY-MM-DD HH24:MI:SS')
);

-- Insert sample data into XXSSGIL_AP_EXPENSE_REPORT_L
INSERT INTO XXSSGIL_AP_EXPENSE_REPORT_L (
  REPORT_HEADER_ID, LAST_UPDATE_DATE, LAST_UPDATED_BY, CODE_COMBINATION_ID, 
  ITEM_DESCRIPTION, SET_OF_BOOKS_ID, AMOUNT, ATTRIBUTE2, CURRENCY_CODE, 
  LINE_TYPE_LOOKUP_CODE, LAST_UPDATE_LOGIN, CREATION_DATE, CREATED_BY,
  DISTRIBUTION_LINE_NUMBER, ORG_ID, START_EXPENSE_DATE, RECEIPT_CURRENCY_CODE,
  RECEIPT_CONVERSION_RATE, DAILY_AMOUNT, RECEIPT_CURRENCY_AMOUNT, WEB_PARAMETER_ID,
  TAX_CODE_OVERRIDE_FLAG, REPORT_LINE_ID
) VALUES (
  747652, TO_DATE('2025-01-04 10:47:38', 'YYYY-MM-DD HH24:MI:SS'), 1378, 226772,
  'Conveyance - Local', 2145, 500, 'Exported', 'BDT',
  'ITEM', 36347390, TO_DATE('2025-01-04 10:47:05', 'YYYY-MM-DD HH24:MI:SS'), 1378,
  1, 401, TO_DATE('2025-01-04', 'YYYY-MM-DD'), 'BDT',
  1, 500, 500, 10090,
  'N', 692320
);

INSERT INTO XXSSGIL_AP_EXPENSE_REPORT_L (
  REPORT_HEADER_ID, LAST_UPDATE_DATE, LAST_UPDATED_BY, CODE_COMBINATION_ID, 
  ITEM_DESCRIPTION, SET_OF_BOOKS_ID, AMOUNT, CURRENCY_CODE, 
  LINE_TYPE_LOOKUP_CODE, LAST_UPDATE_LOGIN, CREATION_DATE, CREATED_BY,
  DISTRIBUTION_LINE_NUMBER, ORG_ID, START_EXPENSE_DATE, RECEIPT_CURRENCY_CODE,
  RECEIPT_CONVERSION_RATE, DAILY_AMOUNT, RECEIPT_CURRENCY_AMOUNT, WEB_PARAMETER_ID,
  JUSTIFICATION, TAX_CODE_OVERRIDE_FLAG, REPORT_LINE_ID
) VALUES (
  748652, TO_DATE('2025-01-26 12:35:36', 'YYYY-MM-DD HH24:MI:SS'), 6774, 226772,
  'Conveyance - Local', 2021, 900, 'BDT',
  'ITEM', 36390883, TO_DATE('2025-01-20 14:10:11', 'YYYY-MM-DD HH24:MI:SS'), 6774,
  1, 401, TO_DATE('2025-01-13', 'YYYY-MM-DD'), 'BDT',
  1, 900, 900, 10090,
  'Purbachal 300 feet to Airport, Airport to Gulshan HO-3', 'N', 693320
);

-- Insert sample data into XXMA_USER_MST
INSERT INTO XXMA_USER_MST (
  USER_ID, SALESREP_ID, USER_NAME, PASS_WORD, IS_ACTIVE, 
  CHANGE_PASSW_FLG, PASSW_EXP_DATE, PASSW_ST_DATE, PASSW_EXP_DURATION
) VALUES (
  5, 100002083, '390', 'C354FD09275F5C7C6A5D5B75F2492D9AEE4C7783', 1,
  '1', TO_DATE('2024-09-20 11:12', 'YYYY-MM-DD HH24:MI'), 
  TO_DATE('2024-09-12 11:12', 'YYYY-MM-DD HH24:MI'), '9'
);

INSERT INTO XXMA_USER_MST (
  USER_ID, USER_NAME, PASS_WORD, IS_ACTIVE, 
  CHANGE_PASSW_FLG, PASSW_EXP_DATE, PASSW_ST_DATE, PASSW_EXP_DURATION
) VALUES (
  352, '4040', 'C354FD09275F5C7C6A5D5B75F2492D9AEE4C7783', 1,
  '1', TO_DATE('2024-09-17 16:15', 'YYYY-MM-DD HH24:MI'), 
  TO_DATE('2024-09-12 16:15', 'YYYY-MM-DD HH24:MI'), '6'
);

-- Add foreign key relationship
ALTER TABLE XXSSGIL_AP_EXPENSE_REPORT_L
ADD CONSTRAINT fk_report_line_header
FOREIGN KEY (REPORT_HEADER_ID)
REFERENCES XXSSGIL_AP_EXPENSE_REPORT_H (REPORT_HEADER_ID);

-- Commit changes
COMMIT; 